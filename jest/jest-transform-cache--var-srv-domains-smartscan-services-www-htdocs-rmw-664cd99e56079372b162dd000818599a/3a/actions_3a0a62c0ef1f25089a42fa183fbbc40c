/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.










setIsConnected = setIsConnected; /* istanbul ignore next */exports.






deleteError = deleteError; /* istanbul ignore next */exports.






deleteSuccess = deleteSuccess; /* istanbul ignore next */exports.






createError = createError; /* istanbul ignore next */exports.






createSuccess = createSuccess; /* istanbul ignore next */exports.







loadSuccess = loadSuccess; /* istanbul ignore next */exports.






setIsCreating = setIsCreating; /* istanbul ignore next */exports.






setIsFetching = setIsFetching; /* istanbul ignore next */exports.






setIsEditing = setIsEditing; /* istanbul ignore next */exports.






updateSuccess = updateSuccess; /* istanbul ignore next */exports.






updateError = updateError; /* istanbul ignore next */exports.






requestLoad = requestLoad; /* istanbul ignore next */exports.







requestCreate = requestCreate; /* istanbul ignore next */exports.









requestUpdate = requestUpdate; /* istanbul ignore next */exports.






requestDelete = requestDelete; /* istanbul ignore next */exports.






requestUnload = requestUnload;var /* istanbul ignore next */_firebaseList = require('../../utils/firebase-list'); /* istanbul ignore next */var _firebaseList2 = _interopRequireDefault(_firebaseList);var /* istanbul ignore next */_types = require('./types'); /* istanbul ignore next */var types = _interopRequireWildcard(_types); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}const taskList = new /* istanbul ignore next */_firebaseList2.default({ onAdd: createSuccess, onChange: updateSuccess, onLoad: loadSuccess, onRemove: deleteSuccess, onConnectionChange: setIsConnected }, 'users');function setIsConnected(isConnected) {return { type: types.CONNECTED, payload: { isConnected } };}function deleteError(error) {return { type: types.DELETE_ERROR, payload: error };}function deleteSuccess(payload) {return { type: types.DELETE_SUCCESS, payload };}function createError(error) {return { type: types.CREATE_ERROR, payload: error };}function createSuccess(payload) {return { type: types.CREATE_SUCCESS, payload };}function loadSuccess(list) {return { type: types.LOAD_SUCCESS, payload: { list } };}function setIsCreating(isCreating) {return { type: types.CREATE, payload: { isCreating } };}function setIsFetching(isFetching) {return { type: types.FETCH, payload: { isFetching } };}function setIsEditing(isEditing) {return { type: types.EDIT, payload: { isEditing } };}function updateSuccess(task) {return { type: types.UPDATE_SUCCESS, payload: task };}function updateError(error) {return { type: types.UPDATE_ERROR, payload: error };}function requestLoad() {return (dispatch, getState) => {dispatch(setIsFetching(true));taskList.subscribe(dispatch);};}function requestCreate(task) {return dispatch => {dispatch(setIsCreating(false));taskList.push(task).catch(error => dispatch(createError(error)));};}function requestUpdate(key, changes) {return dispatch => {taskList.update(key, changes).catch(error => dispatch(updateError(error)));};}function requestDelete(key) {return dispatch => {taskList.remove(key).catch(error => dispatch(deleteError(error)));};}function requestUnload() {
  taskList.unsubscribe();
  return {
    type: types.UNLOAD_SUCCESS };

}