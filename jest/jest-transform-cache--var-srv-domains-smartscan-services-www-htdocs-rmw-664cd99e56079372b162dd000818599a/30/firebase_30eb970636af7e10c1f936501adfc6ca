/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.firebaseDb = exports.firebaseAuth = exports.firebaseApp = undefined;var /* istanbul ignore next */_firebase = require('firebase'); /* istanbul ignore next */var _firebase2 = _interopRequireDefault(_firebase);
var /* istanbul ignore next */_config = require('../config'); /* istanbul ignore next */var _config2 = _interopRequireDefault(_config);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const firebaseApp = /* istanbul ignore next */exports.firebaseApp = /* istanbul ignore next */_firebase2.default.initializeApp( /* istanbul ignore next */_config2.default.FIREBASE_CONFIG);
const firebaseAuth = /* istanbul ignore next */exports.firebaseAuth = firebaseApp.auth();
const firebaseDb = /* istanbul ignore next */exports.firebaseDb = firebaseApp.database();

const FireBaseTools = {

  /**
                        * Return an instance of a firebase auth provider based on the provider string.
                        *
                        * @param provider
                        * @returns {firebase.auth.AuthProvider}
                        */
  getProvider: provider => {
    switch (provider) {
      case 'email':
        return new /* istanbul ignore next */_firebase2.default.auth.EmailAuthProvider();
      case 'facebook':
        return new /* istanbul ignore next */_firebase2.default.auth.FacebookAuthProvider();
      case 'github':
        return new /* istanbul ignore next */_firebase2.default.auth.GithubAuthProvider();
      case 'google':
        return new /* istanbul ignore next */_firebase2.default.auth.GoogleAuthProvider();
      case 'twitter':
        return new /* istanbul ignore next */_firebase2.default.auth.TwitterAuthProvider();
      default:
        throw new Error('Provider is not supported!!!');}

  },

  /**
     * Login with provider => p is provider "email", "facebook", "github", "google", or "twitter"
     * Uses Popup therefore provider must be an OAuth provider. EmailAuthProvider will throw an error
     *
     * @returns {any|!firebase.Thenable.<*>|firebase.Thenable<any>}
     */
  loginWithProvider: p => {
    const provider = FireBaseTools.getProvider(p);
    return firebaseAuth.signInWithPopup(provider).
    then(firebaseAuth.currentUser).
    catch(error => ({
      errorCode: error.code,
      errorMessage: error.message }));

  },

  /**
     * Register a user with email and password
     *
     * @param user
     * @returns {any|!firebase.Thenable.<*>|firebase.Thenable<any>}
     */
  registerUser: user => firebaseAuth.createUserWithEmailAndPassword(user.email, user.password).
  then(userInfo => userInfo).
  catch(error => ({
    errorCode: error.code,
    errorMessage: error.message })),


  /**
                                     * Sign the user out
                                     *
                                     * @returns {!firebase.Promise.<*>|firebase.Thenable<any>|firebase.Promise<any>|!firebase.Thenable.<*>}
                                     */
  logoutUser: () => firebaseAuth.signOut().then(() => ({
    success: 1,
    message: 'logout' })),


  /**
                           * Retrieve the current user (Promise)
                           * @returns {Promise}
                           */
  fetchUser: () => new Promise((resolve, reject) => {
    const unsub = firebaseAuth.onAuthStateChanged(user => {
      unsub();
      resolve(user);
    }, error => {
      reject(error);
    });
  }),

  /**
      * Log the user in using email and password
      *
      * @param user
      * @returns {any|!firebase.Thenable.<*>|firebase.Thenable<any>}
      */
  loginUser: user => firebaseAuth.signInWithEmailAndPassword(user.email, user.password).
  then(userInfo => userInfo).
  catch(error => ({
    errorCode: error.code,
    errorMessage: error.message })),


  /**
                                     * Update a user's profile data
                                     *
                                     * @param u
                                     * @returns {!firebase.Promise.<*>|firebase.Thenable<any>|firebase.Promise<any>|!firebase.Thenable.<*>}
                                     */
  updateUserProfile: u => firebaseAuth.currentUser.updateProfile(u).then(() => firebaseAuth.currentUser, error => ({
    errorCode: error.code,
    errorMessage: error.message })),


  /**
                                     * Reset the password given the specified email
                                     *
                                     * @param email {string}
                                     * @returns {!firebase.Promise.<*>|firebase.Thenable<any>|firebase.Promise<any>|!firebase.Thenable.<*>}
                                     */
  resetPasswordEmail: email => firebaseAuth.sendPasswordResetEmail(email).then(() => ({
    message: 'Email sent' }),
  error => ({
    errorCode: error.code,
    errorMessage: error.message })),


  /**
                                     * Update the user's password with the given password
                                     *
                                     * @param newPassword {string}
                                     * @returns {!firebase.Promise.<*>|firebase.Thenable<any>|firebase.Promise<any>|!firebase.Thenable.<*>}
                                     */
  changePassword: newPassword => firebaseAuth.currentUser.updatePassword(newPassword).then(user => user, error => ({
    errorCode: error.code,
    errorMessage: error.message })),


  /**
                                     * Send an account email verification message for the currently logged in user
                                     *
                                     * @returns {!firebase.Promise.<*>|firebase.Thenable<any>|firebase.Promise<any>|!firebase.Thenable.<*>}
                                     */
  sendEmailVerification: () => firebaseAuth.currentUser.sendEmailVerification().then(() => ({
    message: 'Email sent' }),
  error => ({
    errorCode: error.code,
    errorMessage: error.message })),


  /**
                                     * Get the firebase database reference.
                                     *
                                     * @param path {!string|string}
                                     * @returns {!firebase.database.Reference|firebase.database.Reference}
                                     */
  getDatabaseReference: path => firebaseDb.ref(path) }; /* istanbul ignore next */exports.default =


FireBaseTools;