/* istanbul ignore next */'use strict';var /* istanbul ignore next */_reducer = require('./reducer'); /* istanbul ignore next */var _reducer2 = _interopRequireDefault(_reducer);
var /* istanbul ignore next */_selectors = require('./selectors'); /* istanbul ignore next */var selectors = _interopRequireWildcard(_selectors); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


describe('auth selectors', () => {


  it('getUser should return only user data', () => {

    const inputUser = {
      displayName: 'Name',
      email: 'Email',
      emailVerified: false,
      isAnonymous: false,
      photoURL: 'img',
      uid: 'uid',
      providerData: null,
      test: 'test' };


    const expectedUser = {
      displayName: 'Name',
      email: 'Email',
      emailVerified: false,
      isAnonymous: false,
      photoURL: 'img',
      uid: 'uid',
      providerData: null,
      isAuthorised: true };


    expect(
    selectors.getUser(inputUser)).
    toEqual(expectedUser);
  });

  it('getUser should rspond to false input', () => {

    expect(
    selectors.getUser()).
    toEqual({
      isAuthorised: false });

  });


  it('getValidationErrorMessage should return error message for fieldID', () => {

    const auth = {
      error: {
        code: 'auth/week-password',
        message: 'Expected Message' } };



    expect(
    selectors.getValidationErrorMessage(auth, 'password')).
    toEqual('Expected Message');
  });

  it('getValidationErrorMessage should undefined if no fieldID found', () => {

    const auth = {
      error: {
        code: 'auth/week-password',
        message: 'Expected Message' } };



    expect(
    selectors.getValidationErrorMessage(auth, 'name')).
    toEqual(undefined);
  });

  it('getValidationErrorMessage should undefined if no fieldID provided', () => {

    const auth = {
      error: {
        code: 'auth/week-password',
        message: 'Expected Message' } };



    expect(
    selectors.getValidationErrorMessage()).
    toEqual(undefined);
  });

  it('isAuthorised should return authorised state', () => {

    const auth = {
      isAuthorised: false };


    expect(
    selectors.isAuthorised(auth)).
    toEqual(false);
  });

  it('isLinkedWithProvider should return link state to provider', () => {

    const auth = {
      providerData: [
      { providerId: 'facebook' }] };



    expect(
    selectors.isLinkedWithProvider(auth, 'facebook')).
    toEqual(true);
  });


});