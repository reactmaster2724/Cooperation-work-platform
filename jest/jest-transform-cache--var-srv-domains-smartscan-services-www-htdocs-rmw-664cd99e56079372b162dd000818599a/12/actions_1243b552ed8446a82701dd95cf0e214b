/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.reauthenticateUser = exports.updateUserPhoto = exports.sendEmailVerification = exports.resetPasswordEmail = exports.changeEmail = exports.changePassword = exports.linkUserWithPopup = exports.reauthenticateUserWithPopup = exports.reauthenticateUserWithCredential = exports.updateUser = exports.signOutUser = exports.signInUser = exports.signUpUser = exports.deleteUser = exports.signInWithProvider = undefined;exports.











initAuth = initAuth; /* istanbul ignore next */exports.












setFetching = setFetching; /* istanbul ignore next */exports.






setIsEditing = setIsEditing; /* istanbul ignore next */exports.






signOutSuccess = signOutSuccess; /* istanbul ignore next */exports.





authError = authError; /* istanbul ignore next */exports.






setAuthMenuOpen = setAuthMenuOpen; /* istanbul ignore next */exports.






setDeleteDialogOpen = setDeleteDialogOpen; /* istanbul ignore next */exports.






setPasswordDialogOpen = setPasswordDialogOpen; /* istanbul ignore next */exports.







setNewPhotoURL = setNewPhotoURL; /* istanbul ignore next */exports.






setIsVerficationEmailSend = setIsVerficationEmailSend;var /* istanbul ignore next */_types = require('./types'); /* istanbul ignore next */var types = _interopRequireWildcard(_types);var /* istanbul ignore next */_selectors = require('./selectors'); /* istanbul ignore next */var selectors = _interopRequireWildcard(_selectors);var /* istanbul ignore next */_firebaseAuth = require('../../utils/firebase-auth'); /* istanbul ignore next */var _firebaseAuth2 = _interopRequireDefault(_firebaseAuth);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}const firebaseAuth = new /* istanbul ignore next */_firebaseAuth2.default({ onAuthStateChanged: onAuthStateChanged, onLogoutUser: signOutSuccess, onFetchChanged: setFetching, onAuthError: authError }, selectors.getUser);function initAuth() {return (dispatch, getState) => {firebaseAuth.subscribe(dispatch);};}function onAuthStateChanged(user) {return { type: types.AUTH_STATE_CHANGED, user };}function setFetching(isFetching) {return { type: types.SET_FETCHING, payload: { isFetching } };}function setIsEditing(isEditing) {return { type: types.SET_IS_EDITING, payload: { isEditing } };}function signOutSuccess() {return { type: types.SIGN_OUT_SUCCESS };}function authError(error) {return { type: types.AUTH_ERROR, error };}function setAuthMenuOpen(open) {return { type: types.SET_AUTH_MENU_OPEN, open };}function setDeleteDialogOpen(open) {return { type: types.SET_DELETE_DIALOG_OPEN, open };}function setPasswordDialogOpen(open, onSuccess = undefined) {return { type: types.SET_PASSWORD_DIALOG_OPEN, open, onSuccess };}function setNewPhotoURL(newPhotoURL) {return { type: types.SET_NEW_PHOTO_URL, newPhotoURL };}function setIsVerficationEmailSend(send) {
  return {
    type: types.SET_IS_VERIFICATION_EMAIL_SEND,
    send };

}

const signInWithProvider = /* istanbul ignore next */exports.signInWithProvider = (provider, onSuccess) => dispatch => firebaseAuth.signInWithPopup(provider, () => {onSuccess();});
const deleteUser = /* istanbul ignore next */exports.deleteUser = props => dispatch => firebaseAuth.deleteProfile(props);
const signUpUser = /* istanbul ignore next */exports.signUpUser = user => dispatch => firebaseAuth.createUserWithEmailAndPassword(user);
const signInUser = /* istanbul ignore next */exports.signInUser = (user, onSuccess = null) => dispatch => firebaseAuth.signInWithEmailAndPassword(user, onSuccess);
const signOutUser = /* istanbul ignore next */exports.signOutUser = () => dispatch => firebaseAuth.signOut();
const updateUser = /* istanbul ignore next */exports.updateUser = user => dispatch => firebaseAuth.updateProfile(user);
const reauthenticateUserWithCredential = /* istanbul ignore next */exports.reauthenticateUserWithCredential = (password, onSuccess = null) => dispatch => firebaseAuth.reauthenticateWithCredential(password, onSuccess);
const reauthenticateUserWithPopup = /* istanbul ignore next */exports.reauthenticateUserWithPopup = (provider, onSuccess = null) => dispatch => firebaseAuth.reauthenticateWithPopup(provider, onSuccess);
const linkUserWithPopup = /* istanbul ignore next */exports.linkUserWithPopup = (provider, onSuccess = null) => dispatch => firebaseAuth.linkWithPopup(provider, onSuccess);
const changePassword = /* istanbul ignore next */exports.changePassword = (newPassword, onSuccess = null) => dispatch => firebaseAuth.updatePassword(newPassword, onSuccess);
const changeEmail = /* istanbul ignore next */exports.changeEmail = (newEmail, onSuccess = null) => dispatch => firebaseAuth.updateEmail(newEmail, onSuccess);
const resetPasswordEmail = /* istanbul ignore next */exports.resetPasswordEmail = (email, onSuccess = null) => dispatch => firebaseAuth.sendPasswordResetEmail(email, onSuccess);
const sendEmailVerification = /* istanbul ignore next */exports.sendEmailVerification = () => dispatch => firebaseAuth.sendEmailVerification(dispatch(setIsVerficationEmailSend(true)));
const updateUserPhoto = /* istanbul ignore next */exports.updateUserPhoto = dataURL => dispatch => firebaseAuth.updateUserPhoto(dataURL);


const reauthenticateUser = /* istanbul ignore next */exports.reauthenticateUser = (auth, onSuccess) => dispatch => {

  if (auth && auth.providerData !== undefined && Array.isArray(auth.providerData) && auth.providerData[0].providerId !== 'password') {
    dispatch(reauthenticateUserWithPopup(auth.providerData[0].providerId, onSuccess));
  } else {
    dispatch(setPasswordDialogOpen(true, onSuccess));
  }
};