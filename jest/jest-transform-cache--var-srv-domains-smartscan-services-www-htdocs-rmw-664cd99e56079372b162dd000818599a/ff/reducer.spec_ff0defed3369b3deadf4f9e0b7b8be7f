/* istanbul ignore next */'use strict';











jest.mock('../../utils/auth');var /* istanbul ignore next */_reduxTestkit = require('redux-testkit');var /* istanbul ignore next */_reducer = require('./reducer'); /* istanbul ignore next */var _reducer2 = _interopRequireDefault(_reducer);var /* istanbul ignore next */_redux = require('redux');var /* istanbul ignore next */_reduxThunk = require('redux-thunk'); /* istanbul ignore next */var _reduxThunk2 = _interopRequireDefault(_reduxThunk);var /* istanbul ignore next */_selectors = require('./selectors'); /* istanbul ignore next */var selectors = _interopRequireWildcard(_selectors);var /* istanbul ignore next */_actions = require('./actions'); /* istanbul ignore next */var actions = _interopRequireWildcard(_actions);var /* istanbul ignore next */_auth = require('../../utils/auth'); /* istanbul ignore next */var auth = _interopRequireWildcard(_auth);var /* istanbul ignore next */_seamlessImmutable = require('seamless-immutable'); /* istanbul ignore next */var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);var /* istanbul ignore next */_reducers = require('../reducers'); /* istanbul ignore next */var reducers = _interopRequireWildcard(_reducers); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}

describe('auth reducer', () => {

  let flushThunks, store;

  beforeEach(() => {
    jest.resetAllMocks();
    flushThunks = /* istanbul ignore next */_reduxTestkit.FlushThunks.createMiddleware();
    store = /* istanbul ignore next */(0, _redux.createStore)( /* istanbul ignore next */(0, _redux.combineReducers)(reducers), /* istanbul ignore next */(0, _redux.applyMiddleware)(flushThunks, /* istanbul ignore next */_reduxThunk2.default));
  });

  it('should fetch posts from server', /* istanbul ignore next */_asyncToGenerator(function* () {
    //auth.loginWithProvider.mockReturnValueOnce({user:{displayName: 'Test'}});
    //const dispatches = await Thunk(actions.signOutUser).execute();
    //expect(dispatches.length).toBe(3);
    //expect(dispatches[0].getAction()).toEqual({ type: 'POSTS_LOADING', loading: true });
    //
    //expect(postsSelectors.isForeground(store.getState())).toBe(false);
    yield store.dispatch(actions.signOutUser()); // this dispathces thunk appOnForeground
    yield flushThunks.flush(); // wait until all async thunks resolve
    expect(postsSelectors.isForeground(store.getState())).toBe(true);

  }));


  it('should return the initial state', () => {
    expect(
    /* istanbul ignore next */(0, _reducer2.default)(undefined, {})).
    toEqual( /* istanbul ignore next */_reducer.initialState);
  });

  it('should not affect state', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect({ type: 'NOT_EXISTING' }).toReturnState( /* istanbul ignore next */_reducer.initialState);
  });


  it('should handle SET_AUTH_MENU_OPEN', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.setAuthMenuOpen(true)).toReturnState( /* istanbul ignore next */Object.assign({}, _reducer.initialState, { isMenuOpen: true }));
  });

  it('should handle SET_PASSWORD_DIALOG_OPEN', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.setPasswordDialogOpen(true)).toReturnState( /* istanbul ignore next */Object.assign({}, _reducer.initialState, { isPasswordDialogOpen: true }));
  });

  it('should handle SET_NEW_PHOTO_URL', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.setNewPhotoURL('url')).toReturnState( /* istanbul ignore next */Object.assign({}, _reducer.initialState, { newPhotoURL: 'url' }));
  });

  it('should handle SET_FETCHING', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.setFetching(true)).toReturnState( /* istanbul ignore next */Object.assign({}, _reducer.initialState, { isFetching: true }));
  });

  it('should handle SET_DELETE_DIALOG_OPEN', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.setDeleteDialogOpen(true)).toReturnState( /* istanbul ignore next */Object.assign({}, _reducer.initialState, { isDeleteDialogOpen: true }));
  });

  it('should handle SET_IS_VERIFICATION_EMAIL_SEND', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.setIsVerficationEmailSend(true)).toReturnState( /* istanbul ignore next */Object.assign({}, _reducer.initialState, { isVerificationEmailSend: true }));
  });

  it('should handle SIGN_OUT_SUCCESS', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.signOutSuccess()).toReturnState( /* istanbul ignore next */_reducer.initialState);
  });

  it('should handle AUTH_ERROR', () => {

    const error = {
      errorCode: 'code',
      errorMessage: 'message' };


    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.authError(error)).toReturnState( /* istanbul ignore next */Object.assign({}, _reducer.initialState, { error }));
  });


  it('should handle SIGN_IN_SUCCESS', () => {

    const user = {
      isAuthorised: true,
      name: 'Name',
      email: 'Email' };


    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.signInSuccess(user)).toReturnState( /* istanbul ignore next */Object.assign({}, _reducer.initialState,

    user));

  });



});