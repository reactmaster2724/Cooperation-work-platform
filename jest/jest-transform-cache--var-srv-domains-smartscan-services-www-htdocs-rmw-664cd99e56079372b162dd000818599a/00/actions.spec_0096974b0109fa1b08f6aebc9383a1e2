/* istanbul ignore next */'use strict';










jest.mock('../../utils/auth');
jest.mock('../../utils/firebase');var /* istanbul ignore next */_reduxTestkit = require('redux-testkit');var /* istanbul ignore next */_reduxMockStore = require('redux-mock-store'); /* istanbul ignore next */var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);var /* istanbul ignore next */_reduxThunk = require('redux-thunk'); /* istanbul ignore next */var _reduxThunk2 = _interopRequireDefault(_reduxThunk);var /* istanbul ignore next */_reducers = require('../reducers'); /* istanbul ignore next */var reducers = _interopRequireWildcard(_reducers);var /* istanbul ignore next */_selectors = require('./selectors'); /* istanbul ignore next */var selectors = _interopRequireWildcard(_selectors);var /* istanbul ignore next */_actions = require('./actions'); /* istanbul ignore next */var actions = _interopRequireWildcard(_actions);var /* istanbul ignore next */_types = require('./types'); /* istanbul ignore next */var types = _interopRequireWildcard(_types);var /* istanbul ignore next */_auth = require('../../utils/auth'); /* istanbul ignore next */var auth = _interopRequireWildcard(_auth);var /* istanbul ignore next */_reducer = require('./reducer'); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const middlewares = [/* istanbul ignore next */_reduxThunk2.default];
const mockStore = /* istanbul ignore next */(0, _reduxMockStore2.default)(middlewares);

describe('auth actions', () => {


  it('should handle fetchUser', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.fetchUser()).then(() => {
      const resultActions = store.getActions();

      expect(resultActions.length).toBe(2);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.FETCH_SUCCESS);
    });

  });


  it('should hanlde signInWithProvider', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.signInWithProvider('facebook')).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(2);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.SIGN_IN_SUCCESS);
    });

  });

  it('should handle signOutUser', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.signOutUser()).then(() => {
      const resultActions = store.getActions();

      expect(resultActions.length).toBe(1);
      expect(resultActions[0].type).toEqual(types.SIGN_OUT_SUCCESS);
    });

  });

  it('should handle deleteUser', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.deleteUser()).then(() => {
      const resultActions = store.getActions();

      expect(resultActions).toHaveLength(1);
      expect(resultActions[0].type).toEqual(types.SIGN_OUT_SUCCESS);
    });

  });

  it('should hanlde signInUser', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.signInUser({})).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(2);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.SIGN_IN_SUCCESS);
    });

  });

  it('should hanlde updateUser', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.updateUser({})).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(2);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.SIGN_IN_SUCCESS);
    });

  });

  it('should hanlde signUpUser', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.signUpUser({})).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(3);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.SIGN_IN_SUCCESS);
      expect(resultActions[2].type).toEqual(types.SET_FETCHING);
    });

  });

  it('should hanlde reauthenticateUserWithCredential', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.reauthenticateUserWithCredential({})).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(0);
    });

  });

  it('should hanlde reauthenticateUserWithPopup', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.reauthenticateUserWithPopup({})).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(0);
    });

  });

  // TODO: repair test
  it('should hanlde reauthenticateUser', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);
    const auth = { providerData: [{ providerId: 'google.com' }] };

    store.dispatch(actions.reauthenticateUser(auth));

    const resultActions = store.getActions();

    expect(resultActions).toEqual([]);

  });

  it('should hanlde resetPasswordEmail', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.resetPasswordEmail({})).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(0);
    });

  });

  it('should hanlde changePassword success', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.changePassword(true)).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(2);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.SET_FETCHING);
    });

  });

  it('should hanlde changePassword error', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.changePassword(false)).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(2);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.SET_FETCHING);
    });

  });


  it('should hanlde linkUserWithPopup success', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);
    const spy = jest.fn();
    const success = () => {spy();};

    return store.dispatch(actions.linkUserWithPopup(true, success)).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(1);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);

      expect(spy).toBeCalled();
    });

  });

  it('should hanlde linkUserWithPopup error', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.linkUserWithPopup(false)).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(1);
      expect(resultActions[0].type).toEqual(types.AUTH_ERROR);
    });

  });

  it('should hanlde changeEmail success', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);
    const spy = jest.fn();
    const success = () => {spy();};

    return store.dispatch(actions.changeEmail(true, success)).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(2);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.SET_FETCHING);

      expect(spy).toBeCalled();
    });

  });

  it('should hanlde changeEmail error', () => {

    const store = mockStore( /* istanbul ignore next */_reducer.initialState);

    return store.dispatch(actions.changeEmail(false)).then(() => {
      const resultActions = store.getActions();
      expect(resultActions.length).toBe(2);
      expect(resultActions[0].type).toEqual(types.SET_FETCHING);
      expect(resultActions[1].type).toEqual(types.AUTH_ERROR);
    });

  });



});