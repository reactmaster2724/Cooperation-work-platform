/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.fetchUser = exports.changePassword = exports.sendEmailVerification = exports.resetPasswordEmail = exports.updateUser = exports.signUpUser = exports.signInUser = exports.signOutUser = exports.signInWithProvider = undefined;exports.






















































































signInSuccess = signInSuccess; /* istanbul ignore next */exports.






signOutSuccess = signOutSuccess; /* istanbul ignore next */exports.












authError = authError; /* istanbul ignore next */exports.






setAuthMenuOpen = setAuthMenuOpen;var /* istanbul ignore next */_auth = require('../../utils/auth'); /* istanbul ignore next */var auth = _interopRequireWildcard(_auth);var /* istanbul ignore next */_types = require('./types'); /* istanbul ignore next */var types = _interopRequireWildcard(_types); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}const signInWithProvider = /* istanbul ignore next */exports.signInWithProvider = (provider, onSuccess = null) => dispatch => {auth.loginWithProvider(provider).then(payload => {dispatch(signInSuccess(payload.user));if (onSuccess && onSuccess instanceof Function) {onSuccess(payload.user);}}).catch(error => dispatch(authError(error)));};const signOutUser = /* istanbul ignore next */exports.signOutUser = user => dispatch => {auth.logoutUser(user).then(() => dispatch(signOutSuccess())).catch(error => dispatch(authError(error)));};const signInUser = /* istanbul ignore next */exports.signInUser = user => dispatch => {auth.loginUser(user).then(result => {dispatch(signInSuccess(result));}).catch(error => dispatch(authError(error)));};const signUpUser = /* istanbul ignore next */exports.signUpUser = user => dispatch => {auth.registerUser(user).then(payload => {dispatch(signInSuccess(payload));}).catch(error => dispatch(authError(error)));};const updateUser = /* istanbul ignore next */exports.updateUser = user => dispatch => {auth.updateUserProfile(user).then(result => {dispatch(signInSuccess(result));}).catch(error => dispatch(authError(error)));};const resetPasswordEmail = /* istanbul ignore next */exports.resetPasswordEmail = (email, onSuccess) => dispatch => {auth.resetPasswordEmail(email).then(() => {if (onSuccess && onSuccess instanceof Function) {onSuccess();}}).catch(error => dispatch(authError(error)));};const sendEmailVerification = /* istanbul ignore next */exports.sendEmailVerification = onSuccess => dispatch => {auth.sendEmailVerification().then(() => {if (onSuccess && onSuccess instanceof Function) {onSuccess();}}).catch(error => dispatch(authError(error)));};const changePassword = /* istanbul ignore next */exports.changePassword = (newPassword, onSuccess) => dispatch => {auth.changePassword(newPassword).then(payload => {if (onSuccess && onSuccess instanceof Function) {onSuccess(payload);}}).catch(error => dispatch(authError(error)));};const fetchUser = /* istanbul ignore next */exports.fetchUser = () => dispatch => {auth.fetchUser().then(result => dispatch(fetchSuccess(result))).catch(error => dispatch(authError(error)));};function signInSuccess(user) {return { type: types.SIGN_IN_SUCCESS, user };}function signOutSuccess() {return { type: types.SIGN_OUT_SUCCESS };}function fetchSuccess(user) {return { type: types.FETCH_SUCCESS, user };}function authError(error) {return { type: types.AUTH_ERROR, error };}function setAuthMenuOpen(open) {
  return {
    type: types.SET_AUTH_MENU_OPEN,
    open };

}