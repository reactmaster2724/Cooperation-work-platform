/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.initialState = undefined;exports.default =







messaging;var /* istanbul ignore next */_types = require('./types'); /* istanbul ignore next */var types = _interopRequireWildcard(_types);var /* istanbul ignore next */_seamlessImmutable = require('seamless-immutable'); /* istanbul ignore next */var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}const initialState = /* istanbul ignore next */exports.initialState = /* istanbul ignore next */(0, _seamlessImmutable2.default)({ hasPermission: false, token: undefined });function messaging(state = initialState, { payload, type }) {
  switch (type) {

    case types.ON_TOKEN_CHANGED:
      return (/* istanbul ignore next */Object.assign({}, state, { hasPermission: true }, payload));

    case types.ON_PERMISSION_CHANGED:
      return (/* istanbul ignore next */Object.assign({}, state, payload));

    default:
      return state;}

}