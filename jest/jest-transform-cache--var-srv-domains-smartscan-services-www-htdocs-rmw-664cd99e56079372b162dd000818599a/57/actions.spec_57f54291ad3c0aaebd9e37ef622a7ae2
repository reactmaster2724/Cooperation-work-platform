/* istanbul ignore next */'use strict';










jest.mock('../../utils/auth');var /* istanbul ignore next */_reduxTestkit = require('redux-testkit');var /* istanbul ignore next */_redux = require('redux');var /* istanbul ignore next */_reduxThunk = require('redux-thunk'); /* istanbul ignore next */var _reduxThunk2 = _interopRequireDefault(_reduxThunk);var /* istanbul ignore next */_reducers = require('../reducers'); /* istanbul ignore next */var reducers = _interopRequireWildcard(_reducers);var /* istanbul ignore next */_selectors = require('./selectors'); /* istanbul ignore next */var selectors = _interopRequireWildcard(_selectors);var /* istanbul ignore next */_actions = require('./actions'); /* istanbul ignore next */var actions = _interopRequireWildcard(_actions);var /* istanbul ignore next */_auth = require('../../utils/auth'); /* istanbul ignore next */var auth = _interopRequireWildcard(_auth);var /* istanbul ignore next */_reducer = require('./reducer'); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}

describe('auth actions', () => {

  let flushThunks, store;

  beforeEach(() => {
    beforeEach(() => {
      jest.resetAllMocks();
      //_.shuffle = jest.fn();
      //_.shuffle.mockImplementation((arr) => arr);
      flushThunks = /* istanbul ignore next */_reduxTestkit.FlushThunks.createMiddleware();
      store = /* istanbul ignore next */(0, _redux.createStore)( /* istanbul ignore next */(0, _redux.combineReducers)(reducers), /* istanbul ignore next */(0, _redux.applyMiddleware)(flushThunks, /* istanbul ignore next */_reduxThunk2.default));
    });
  });

  it('should fetch posts from server', /* istanbul ignore next */_asyncToGenerator(function* () {

  }));



  it('should fetch posts from server', /* istanbul ignore next */_asyncToGenerator(function* () {
    auth.logoutUser.mockReturnValueOnce({});
    //expect(store.getState()).toBe(initialState);
    expect(store.getState()['default']['auth']).toEqual( /* istanbul ignore next */_reducer.initialState);
    //await store.dispatch(actions.signOutUser());
    expect(store.getState()['default']['auth']).toEqual( /* istanbul ignore next */_reducer.initialState);
    //expect(actions.getPosts(store.getState())).toEqual(['post1', 'post2']);
  }));

  it('should handle signOutUsert', /* istanbul ignore next */_asyncToGenerator(function* () {

    auth.logoutUser.mockReturnValueOnce({});
    yield store.dispatch(actions.signOutUser);
    expect(store.getState()['default']['auth']).toEqual( /* istanbul ignore next */_reducer.initialState);

  }));





});