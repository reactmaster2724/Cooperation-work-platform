/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.initialState = undefined;var cov_r5dzrkgba = function () {var path = '/var/srv/domains/smartscan.services/www/htdocs/rmw/src/store/tasks/reducer.js',hash = '6592a28bbab4c7188e187f873d5f85007576432b',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/var/srv/domains/smartscan.services/www/htdocs/rmw/src/store/tasks/reducer.js', statementMap: { '0': { start: { line: 3, column: 26 }, end: { line: 9, column: 1 } }, '1': { start: { line: 12, column: 2 }, end: { line: 45, column: 3 } }, '2': { start: { line: 14, column: 4 }, end: { line: 14, column: 91 } }, '3': { start: { line: 17, column: 4 }, end: { line: 17, column: 90 } }, '4': { start: { line: 20, column: 46 }, end: { line: 20, column: 56 } }, '5': { start: { line: 22, column: 4 }, end: { line: 26, column: 6 } }, '6': { start: { line: 32, column: 4 }, end: { line: 32, column: 34 } }, '7': { start: { line: 37, column: 4 }, end: { line: 37, column: 41 } }, '8': { start: { line: 40, column: 4 }, end: { line: 40, column: 54 } }, '9': { start: { line: 44, column: 4 }, end: { line: 44, column: 17 } } }, fnMap: { '0': { name: 'tasks', decl: { start: { line: 11, column: 24 }, end: { line: 11, column: 29 } }, loc: { start: { line: 11, column: 69 }, end: { line: 46, column: 1 } }, line: 11 } }, branchMap: { '0': { loc: { start: { line: 11, column: 30 }, end: { line: 11, column: 50 } }, type: 'default-arg', locations: [{ start: { line: 11, column: 38 }, end: { line: 11, column: 50 } }], line: 11 }, '1': { loc: { start: { line: 12, column: 2 }, end: { line: 45, column: 3 } }, type: 'switch', locations: [{ start: { line: 13, column: 4 }, end: { line: 14, column: 91 } }, { start: { line: 16, column: 4 }, end: { line: 17, column: 90 } }, { start: { line: 19, column: 4 }, end: { line: 26, column: 6 } }, { start: { line: 28, column: 4 }, end: { line: 28, column: 21 } }, { start: { line: 29, column: 4 }, end: { line: 29, column: 22 } }, { start: { line: 30, column: 4 }, end: { line: 30, column: 20 } }, { start: { line: 31, column: 4 }, end: { line: 32, column: 34 } }, { start: { line: 34, column: 4 }, end: { line: 34, column: 28 } }, { start: { line: 35, column: 4 }, end: { line: 35, column: 28 } }, { start: { line: 36, column: 4 }, end: { line: 37, column: 41 } }, { start: { line: 39, column: 4 }, end: { line: 40, column: 54 } }, { start: { line: 43, column: 4 }, end: { line: 44, column: 17 } }], line: 12 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0 }, f: { '0': 0 }, b: { '0': [0], '1': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();exports.default =









tasks;var /* istanbul ignore next */_types = require('./types'); /* istanbul ignore next */var types = _interopRequireWildcard(_types); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}const initialState = /* istanbul ignore next */exports.initialState = (++cov_r5dzrkgba.s[0], { isFetching: false, isConnected: false, isCreating: false, isEditing: null, list: {} });function tasks(state = /* istanbul ignore next */(++cov_r5dzrkgba.b[0][0], initialState), { payload, type }) {/* istanbul ignore next */++cov_r5dzrkgba.f[0];++cov_r5dzrkgba.s[1];
    switch (type) {
        case types.CREATE_SUCCESS: /* istanbul ignore next */++cov_r5dzrkgba.b[1][0];++cov_r5dzrkgba.s[2];
            return (/* istanbul ignore next */Object.assign({}, state, { isCreating: false, list: /* istanbul ignore next */Object.assign({}, state.list, { [payload.key]: payload.data }) }));

        case types.UPDATE_SUCCESS: /* istanbul ignore next */++cov_r5dzrkgba.b[1][1];++cov_r5dzrkgba.s[3];
            return (/* istanbul ignore next */Object.assign({}, state, { isEditing: false, list: /* istanbul ignore next */Object.assign({}, state.list, { [payload.key]: payload.data }) }));

        case types.DELETE_SUCCESS: /* istanbul ignore next */++cov_r5dzrkgba.b[1][2];
            let /* istanbul ignore next */_ref = (++cov_r5dzrkgba.s[4], state.list), /* istanbul ignore next */{ [payload.key]: undefined } = _ref, /* istanbul ignore next */rest = _objectWithoutProperties(_ref, [payload.key]); /* istanbul ignore next */++cov_r5dzrkgba.s[5];

            return (/* istanbul ignore next */Object.assign({}, state, {
                    deleted: payload,
                    previous: state.list,
                    list: rest }));


        case types.FETCH: /* istanbul ignore next */++cov_r5dzrkgba.b[1][3];
        case types.CREATE: /* istanbul ignore next */++cov_r5dzrkgba.b[1][4];
        case types.EDIT: /* istanbul ignore next */++cov_r5dzrkgba.b[1][5];
        case types.CONNECTED: /* istanbul ignore next */++cov_r5dzrkgba.b[1][6];++cov_r5dzrkgba.s[6];
            return (/* istanbul ignore next */Object.assign({}, state, payload));

        case types.DELETE_ERROR: /* istanbul ignore next */++cov_r5dzrkgba.b[1][7];
        case types.CREATE_ERROR: /* istanbul ignore next */++cov_r5dzrkgba.b[1][8];
        case types.UPDATE_ERROR: /* istanbul ignore next */++cov_r5dzrkgba.b[1][9];++cov_r5dzrkgba.s[7];
            return (/* istanbul ignore next */Object.assign({}, state, { isFetching: false }));

        case types.LOAD_SUCCESS: /* istanbul ignore next */++cov_r5dzrkgba.b[1][10];++cov_r5dzrkgba.s[8];
            return (/* istanbul ignore next */Object.assign({}, state, { isFetching: false }, payload));


        default: /* istanbul ignore next */++cov_r5dzrkgba.b[1][11];++cov_r5dzrkgba.s[9];
            return state;}

}