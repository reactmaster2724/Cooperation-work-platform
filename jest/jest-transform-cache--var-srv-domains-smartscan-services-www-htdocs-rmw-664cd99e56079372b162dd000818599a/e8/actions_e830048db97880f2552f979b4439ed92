/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_c4vlhlpsg = function () {var path = '/var/srv/domains/smartscan.services/www/htdocs/rmw/src/store/users/actions.js',hash = '89ad8cec00c38e179339c44e582cf6874960a8be',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/var/srv/domains/smartscan.services/www/htdocs/rmw/src/store/users/actions.js', statementMap: { '0': { start: { line: 4, column: 16 }, end: { line: 10, column: 11 } }, '1': { start: { line: 13, column: 2 }, end: { line: 16, column: 4 } }, '2': { start: { line: 20, column: 2 }, end: { line: 23, column: 4 } }, '3': { start: { line: 27, column: 2 }, end: { line: 30, column: 4 } }, '4': { start: { line: 34, column: 2 }, end: { line: 37, column: 4 } }, '5': { start: { line: 41, column: 2 }, end: { line: 44, column: 4 } }, '6': { start: { line: 49, column: 2 }, end: { line: 52, column: 4 } }, '7': { start: { line: 56, column: 2 }, end: { line: 59, column: 4 } }, '8': { start: { line: 63, column: 2 }, end: { line: 66, column: 4 } }, '9': { start: { line: 70, column: 2 }, end: { line: 73, column: 4 } }, '10': { start: { line: 77, column: 2 }, end: { line: 80, column: 4 } }, '11': { start: { line: 84, column: 2 }, end: { line: 87, column: 4 } }, '12': { start: { line: 91, column: 2 }, end: { line: 95, column: 4 } }, '13': { start: { line: 93, column: 4 }, end: { line: 93, column: 34 } }, '14': { start: { line: 94, column: 4 }, end: { line: 94, column: 33 } }, '15': { start: { line: 99, column: 2 }, end: { line: 105, column: 4 } }, '16': { start: { line: 101, column: 4 }, end: { line: 101, column: 35 } }, '17': { start: { line: 103, column: 4 }, end: { line: 104, column: 52 } }, '18': { start: { line: 104, column: 22 }, end: { line: 104, column: 50 } }, '19': { start: { line: 109, column: 2 }, end: { line: 112, column: 4 } }, '20': { start: { line: 110, column: 4 }, end: { line: 111, column: 52 } }, '21': { start: { line: 111, column: 22 }, end: { line: 111, column: 50 } }, '22': { start: { line: 116, column: 2 }, end: { line: 119, column: 4 } }, '23': { start: { line: 117, column: 4 }, end: { line: 118, column: 52 } }, '24': { start: { line: 118, column: 22 }, end: { line: 118, column: 50 } }, '25': { start: { line: 123, column: 2 }, end: { line: 123, column: 25 } }, '26': { start: { line: 124, column: 2 }, end: { line: 126, column: 4 } } }, fnMap: { '0': { name: 'setIsConnected', decl: { start: { line: 12, column: 16 }, end: { line: 12, column: 30 } }, loc: { start: { line: 12, column: 44 }, end: { line: 17, column: 1 } }, line: 12 }, '1': { name: 'deleteError', decl: { start: { line: 19, column: 16 }, end: { line: 19, column: 27 } }, loc: { start: { line: 19, column: 35 }, end: { line: 24, column: 1 } }, line: 19 }, '2': { name: 'deleteSuccess', decl: { start: { line: 26, column: 16 }, end: { line: 26, column: 29 } }, loc: { start: { line: 26, column: 39 }, end: { line: 31, column: 1 } }, line: 26 }, '3': { name: 'createError', decl: { start: { line: 33, column: 16 }, end: { line: 33, column: 27 } }, loc: { start: { line: 33, column: 35 }, end: { line: 38, column: 1 } }, line: 33 }, '4': { name: 'createSuccess', decl: { start: { line: 40, column: 16 }, end: { line: 40, column: 29 } }, loc: { start: { line: 40, column: 39 }, end: { line: 45, column: 1 } }, line: 40 }, '5': { name: 'loadSuccess', decl: { start: { line: 48, column: 16 }, end: { line: 48, column: 27 } }, loc: { start: { line: 48, column: 34 }, end: { line: 53, column: 1 } }, line: 48 }, '6': { name: 'setIsCreating', decl: { start: { line: 55, column: 16 }, end: { line: 55, column: 29 } }, loc: { start: { line: 55, column: 42 }, end: { line: 60, column: 1 } }, line: 55 }, '7': { name: 'setIsFetching', decl: { start: { line: 62, column: 16 }, end: { line: 62, column: 29 } }, loc: { start: { line: 62, column: 42 }, end: { line: 67, column: 1 } }, line: 62 }, '8': { name: 'setIsEditing', decl: { start: { line: 69, column: 16 }, end: { line: 69, column: 28 } }, loc: { start: { line: 69, column: 40 }, end: { line: 74, column: 1 } }, line: 69 }, '9': { name: 'updateSuccess', decl: { start: { line: 76, column: 16 }, end: { line: 76, column: 29 } }, loc: { start: { line: 76, column: 36 }, end: { line: 81, column: 1 } }, line: 76 }, '10': { name: 'updateError', decl: { start: { line: 83, column: 16 }, end: { line: 83, column: 27 } }, loc: { start: { line: 83, column: 35 }, end: { line: 88, column: 1 } }, line: 83 }, '11': { name: 'requestLoad', decl: { start: { line: 90, column: 16 }, end: { line: 90, column: 27 } }, loc: { start: { line: 90, column: 30 }, end: { line: 96, column: 1 } }, line: 90 }, '12': { name: '(anonymous_12)', decl: { start: { line: 91, column: 9 }, end: { line: 91, column: 10 } }, loc: { start: { line: 91, column: 33 }, end: { line: 95, column: 3 } }, line: 91 }, '13': { name: 'requestCreate', decl: { start: { line: 98, column: 16 }, end: { line: 98, column: 29 } }, loc: { start: { line: 98, column: 36 }, end: { line: 106, column: 1 } }, line: 98 }, '14': { name: '(anonymous_14)', decl: { start: { line: 99, column: 9 }, end: { line: 99, column: 10 } }, loc: { start: { line: 99, column: 21 }, end: { line: 105, column: 3 } }, line: 99 }, '15': { name: '(anonymous_15)', decl: { start: { line: 104, column: 13 }, end: { line: 104, column: 14 } }, loc: { start: { line: 104, column: 22 }, end: { line: 104, column: 50 } }, line: 104 }, '16': { name: 'requestUpdate', decl: { start: { line: 108, column: 16 }, end: { line: 108, column: 29 } }, loc: { start: { line: 108, column: 44 }, end: { line: 113, column: 1 } }, line: 108 }, '17': { name: '(anonymous_17)', decl: { start: { line: 109, column: 9 }, end: { line: 109, column: 10 } }, loc: { start: { line: 109, column: 21 }, end: { line: 112, column: 3 } }, line: 109 }, '18': { name: '(anonymous_18)', decl: { start: { line: 111, column: 13 }, end: { line: 111, column: 14 } }, loc: { start: { line: 111, column: 22 }, end: { line: 111, column: 50 } }, line: 111 }, '19': { name: 'requestDelete', decl: { start: { line: 115, column: 16 }, end: { line: 115, column: 29 } }, loc: { start: { line: 115, column: 35 }, end: { line: 120, column: 1 } }, line: 115 }, '20': { name: '(anonymous_20)', decl: { start: { line: 116, column: 9 }, end: { line: 116, column: 10 } }, loc: { start: { line: 116, column: 21 }, end: { line: 119, column: 3 } }, line: 116 }, '21': { name: '(anonymous_21)', decl: { start: { line: 118, column: 13 }, end: { line: 118, column: 14 } }, loc: { start: { line: 118, column: 22 }, end: { line: 118, column: 50 } }, line: 118 }, '22': { name: 'requestUnload', decl: { start: { line: 122, column: 16 }, end: { line: 122, column: 29 } }, loc: { start: { line: 122, column: 32 }, end: { line: 127, column: 1 } }, line: 122 } }, branchMap: {}, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0 }, b: {}, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();exports.










setIsConnected = setIsConnected; /* istanbul ignore next */exports.






deleteError = deleteError; /* istanbul ignore next */exports.






deleteSuccess = deleteSuccess; /* istanbul ignore next */exports.






createError = createError; /* istanbul ignore next */exports.






createSuccess = createSuccess; /* istanbul ignore next */exports.







loadSuccess = loadSuccess; /* istanbul ignore next */exports.






setIsCreating = setIsCreating; /* istanbul ignore next */exports.






setIsFetching = setIsFetching; /* istanbul ignore next */exports.






setIsEditing = setIsEditing; /* istanbul ignore next */exports.






updateSuccess = updateSuccess; /* istanbul ignore next */exports.






updateError = updateError; /* istanbul ignore next */exports.






requestLoad = requestLoad; /* istanbul ignore next */exports.







requestCreate = requestCreate; /* istanbul ignore next */exports.









requestUpdate = requestUpdate; /* istanbul ignore next */exports.






requestDelete = requestDelete; /* istanbul ignore next */exports.






requestUnload = requestUnload;var /* istanbul ignore next */_firebaseList = require('../../utils/firebase-list'); /* istanbul ignore next */var _firebaseList2 = _interopRequireDefault(_firebaseList);var /* istanbul ignore next */_types = require('./types'); /* istanbul ignore next */var types = _interopRequireWildcard(_types); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}const taskList = /* istanbul ignore next */(++cov_c4vlhlpsg.s[0], new /* istanbul ignore next */_firebaseList2.default({ onAdd: createSuccess, onChange: updateSuccess, onLoad: loadSuccess, onRemove: deleteSuccess, onConnectionChange: setIsConnected }, 'users'));function setIsConnected(isConnected) {/* istanbul ignore next */++cov_c4vlhlpsg.f[0];++cov_c4vlhlpsg.s[1];return { type: types.CONNECTED, payload: { isConnected } };}function deleteError(error) {/* istanbul ignore next */++cov_c4vlhlpsg.f[1];++cov_c4vlhlpsg.s[2];return { type: types.DELETE_ERROR, payload: error };}function deleteSuccess(payload) {/* istanbul ignore next */++cov_c4vlhlpsg.f[2];++cov_c4vlhlpsg.s[3];return { type: types.DELETE_SUCCESS, payload };}function createError(error) {/* istanbul ignore next */++cov_c4vlhlpsg.f[3];++cov_c4vlhlpsg.s[4];return { type: types.CREATE_ERROR, payload: error };}function createSuccess(payload) {/* istanbul ignore next */++cov_c4vlhlpsg.f[4];++cov_c4vlhlpsg.s[5];return { type: types.CREATE_SUCCESS, payload };}function loadSuccess(list) {/* istanbul ignore next */++cov_c4vlhlpsg.f[5];++cov_c4vlhlpsg.s[6];return { type: types.LOAD_SUCCESS, payload: { list } };}function setIsCreating(isCreating) {/* istanbul ignore next */++cov_c4vlhlpsg.f[6];++cov_c4vlhlpsg.s[7];return { type: types.CREATE, payload: { isCreating } };}function setIsFetching(isFetching) {/* istanbul ignore next */++cov_c4vlhlpsg.f[7];++cov_c4vlhlpsg.s[8];return { type: types.FETCH, payload: { isFetching } };}function setIsEditing(isEditing) {/* istanbul ignore next */++cov_c4vlhlpsg.f[8];++cov_c4vlhlpsg.s[9];return { type: types.EDIT, payload: { isEditing } };}function updateSuccess(task) {/* istanbul ignore next */++cov_c4vlhlpsg.f[9];++cov_c4vlhlpsg.s[10];return { type: types.UPDATE_SUCCESS, payload: task };}function updateError(error) {/* istanbul ignore next */++cov_c4vlhlpsg.f[10];++cov_c4vlhlpsg.s[11];return { type: types.UPDATE_ERROR, payload: error };}function requestLoad() {/* istanbul ignore next */++cov_c4vlhlpsg.f[11];++cov_c4vlhlpsg.s[12];return (dispatch, getState) => {/* istanbul ignore next */++cov_c4vlhlpsg.f[12];++cov_c4vlhlpsg.s[13];dispatch(setIsFetching(true)); /* istanbul ignore next */++cov_c4vlhlpsg.s[14];taskList.subscribe(dispatch);};}function requestCreate(task) {/* istanbul ignore next */++cov_c4vlhlpsg.f[13];++cov_c4vlhlpsg.s[15];return dispatch => {/* istanbul ignore next */++cov_c4vlhlpsg.f[14];++cov_c4vlhlpsg.s[16];dispatch(setIsCreating(false)); /* istanbul ignore next */++cov_c4vlhlpsg.s[17];taskList.push(task).catch(error => {/* istanbul ignore next */++cov_c4vlhlpsg.f[15];++cov_c4vlhlpsg.s[18];return dispatch(createError(error));});};}function requestUpdate(key, changes) {/* istanbul ignore next */++cov_c4vlhlpsg.f[16];++cov_c4vlhlpsg.s[19];return dispatch => {/* istanbul ignore next */++cov_c4vlhlpsg.f[17];++cov_c4vlhlpsg.s[20];taskList.update(key, changes).catch(error => {/* istanbul ignore next */++cov_c4vlhlpsg.f[18];++cov_c4vlhlpsg.s[21];return dispatch(updateError(error));});};}function requestDelete(key) {/* istanbul ignore next */++cov_c4vlhlpsg.f[19];++cov_c4vlhlpsg.s[22];return dispatch => {/* istanbul ignore next */++cov_c4vlhlpsg.f[20];++cov_c4vlhlpsg.s[23];taskList.remove(key).catch(error => {/* istanbul ignore next */++cov_c4vlhlpsg.f[21];++cov_c4vlhlpsg.s[24];return dispatch(deleteError(error));});};}function requestUnload() {/* istanbul ignore next */++cov_c4vlhlpsg.f[22];++cov_c4vlhlpsg.s[25];
  taskList.unsubscribe(); /* istanbul ignore next */++cov_c4vlhlpsg.s[26];
  return {
    type: types.UNLOAD_SUCCESS };

}