/* istanbul ignore next */'use strict';var /* istanbul ignore next */_reduxTestkit = require('redux-testkit');
var /* istanbul ignore next */_reducer = require('./reducer'); /* istanbul ignore next */var _reducer2 = _interopRequireDefault(_reducer);
var /* istanbul ignore next */_selectors = require('./selectors'); /* istanbul ignore next */var selectors = _interopRequireWildcard(_selectors);
var /* istanbul ignore next */_actions = require('./actions'); /* istanbul ignore next */var actions = _interopRequireWildcard(_actions);
var /* istanbul ignore next */_seamlessImmutable = require('seamless-immutable'); /* istanbul ignore next */var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const initialState = /* istanbul ignore next */(0, _seamlessImmutable2.default)({
  isSignedIn: false,
  isMenuOpen: false });


describe('auth reducer', () => {

  beforeEach(() => {
    jest.resetAllMocks();
  });

  it('should return the initial state', () => {
    expect(
    /* istanbul ignore next */(0, _reducer2.default)(undefined, {})).
    toEqual(initialState);
  });

  it('should not affect state', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect({ type: 'NOT_EXISTING' }).toReturnState(initialState);
  });


  it('should handle SET_AUTH_MENU_OPEN', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.setAuthMenuOpen(true)).toReturnState({ isSignedIn: false, isMenuOpen: true });
  });

  it('should handle SIGN_OUT_SUCCESS', () => {
    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.signOutSuccess()).toReturnState(initialState);
  });

  it('should handle AUTH_ERROR', () => {

    const error = {
      errorCode: 'code',
      errorMessage: 'message' };


    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.authError(error)).toReturnState( /* istanbul ignore next */Object.assign({}, initialState, { error }));
  });


  it('should handle SIGN_IN_SUCCESS', () => {

    const user = {
      name: 'Name',
      email: 'Email' };


    /* istanbul ignore next */(0, _reduxTestkit.Reducer)( /* istanbul ignore next */_reducer2.default).expect(actions.signInSuccess(user)).toReturnState( /* istanbul ignore next */Object.assign({
      isMenuOpen: false,
      isSignedIn: true },
    selectors.getUser(user)));

  });



});