/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.fetchUser = exports.updateUserProfile = exports.sendEmailVerification = exports.changePassword = exports.resetPasswordEmail = exports.logoutUser = exports.loginUser = exports.registerUser = exports.loginWithProvider = exports.isAuthorised = undefined;var /* istanbul ignore next */_firebase = require('firebase'); /* istanbul ignore next */var _firebase2 = _interopRequireDefault(_firebase);
var /* istanbul ignore next */_firebase3 = require('./firebase'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


const getProvider = provider => {
  switch (provider) {
    case 'facebook':
      return new /* istanbul ignore next */_firebase2.default.auth.FacebookAuthProvider();
    case 'github':
      return new /* istanbul ignore next */_firebase2.default.auth.GithubAuthProvider();
    case 'google':
      return new /* istanbul ignore next */_firebase2.default.auth.GoogleAuthProvider();
    case 'twitter':
      return new /* istanbul ignore next */_firebase2.default.auth.TwitterAuthProvider();
    default:
      throw new Error('Provider is not supported!!!');}

};


const isAuthorised = /* istanbul ignore next */exports.isAuthorised = () => {
  const key = Object.keys(localStorage).find(e => e.match(/firebase:authUser/));
  const data = JSON.parse(localStorage.getItem(key));
  return data != null;
};

const loginWithProvider = /* istanbul ignore next */exports.loginWithProvider = p => /* istanbul ignore next */_firebase3.firebaseAuth.signInWithPopup(getProvider(p));
const registerUser = /* istanbul ignore next */exports.registerUser = user => /* istanbul ignore next */_firebase3.firebaseAuth.createUserWithEmailAndPassword(user.email, user.password);
const loginUser = /* istanbul ignore next */exports.loginUser = user => /* istanbul ignore next */_firebase3.firebaseAuth.signInWithEmailAndPassword(user.email, user.password);
const logoutUser = /* istanbul ignore next */exports.logoutUser = () => /* istanbul ignore next */_firebase3.firebaseAuth.signOut();
const resetPasswordEmail = /* istanbul ignore next */exports.resetPasswordEmail = email => /* istanbul ignore next */_firebase3.firebaseAuth.sendPasswordResetEmail(email);
const changePassword = /* istanbul ignore next */exports.changePassword = newPassword => /* istanbul ignore next */_firebase3.firebaseAuth.currentUser.updatePassword(newPassword);
const sendEmailVerification = /* istanbul ignore next */exports.sendEmailVerification = () => /* istanbul ignore next */_firebase3.firebaseAuth.currentUser.sendEmailVerification();

const updateUserProfile = /* istanbul ignore next */exports.updateUserProfile = user => /* istanbul ignore next */_firebase3.firebaseAuth.currentUser.updateProfile(user).
then(() => /* istanbul ignore next */_firebase3.firebaseAuth.currentUser).
catch(error => error);

const fetchUser = /* istanbul ignore next */exports.fetchUser = () => new Promise((resolve, reject) => {
  const unsub = /* istanbul ignore next */_firebase3.firebaseAuth.onAuthStateChanged(user => {
    unsub();
    resolve(user);
  }, error => {
    reject(error);
  });
});