/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.PasswordDialog = undefined;var _jsxFileName = '/var/srv/domains/smartscan.services/www/htdocs/rmw/src/containers/PasswordDialog/PasswordDialog.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_propTypes = require('prop-types'); /* istanbul ignore next */var _propTypes2 = _interopRequireDefault(_propTypes);
var /* istanbul ignore next */_muiThemeable = require('material-ui/styles/muiThemeable'); /* istanbul ignore next */var _muiThemeable2 = _interopRequireDefault(_muiThemeable);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_TextField = require('material-ui/TextField'); /* istanbul ignore next */var _TextField2 = _interopRequireDefault(_TextField);
var /* istanbul ignore next */_actions = require('../../store/auth/actions');



var /* istanbul ignore next */_selectors = require('../../store/auth/selectors');
var /* istanbul ignore next */_Dialog = require('material-ui/Dialog'); /* istanbul ignore next */var _Dialog2 = _interopRequireDefault(_Dialog);
var /* istanbul ignore next */_FlatButton = require('material-ui/FlatButton'); /* istanbul ignore next */var _FlatButton2 = _interopRequireDefault(_FlatButton);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const styles = {
  content: {
    maxWidth: 300 } };



class PasswordDialog extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.



    handleClose = () => {
      const { setPasswordDialogOpen } = this.props;

      setPasswordDialogOpen(false);
    }; /* istanbul ignore next */this.

    handleKeyDown = (event, onSucces) => {
      if (event.keyCode === 13) {
        onSucces();
      }
    }; /* istanbul ignore next */this.

    handleReauthenticationSuccess = () => {
      const { auth } = this.props;

      this.handleClose();

      if (auth && auth.onPasswordDialogSuccess && auth.onPasswordDialogSuccess instanceof Function) {
        auth.onPasswordDialogSuccess();
      }
    }; /* istanbul ignore next */this.


    hanldePasswordSubmit = () => {
      const { reauthenticateUserWithCredential } = this.props;

      reauthenticateUserWithCredential(this.password.getValue(), this.handleReauthenticationSuccess);
    };this.password = null;}

  render() {
    const { intl, getValidationErrorMessage, auth } = this.props;

    const actions = [
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
      label: intl.formatMessage({ id: 'submit' }),
      primary: true,
      onTouchTap: this.hanldePasswordSubmit, __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this }),

    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
      label: intl.formatMessage({ id: 'cancel' }),
      primary: true,
      onTouchTap: this.handleClose, __source: { fileName: _jsxFileName, lineNumber: 66 }, __self: this })];



    return (

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */{
          title: intl.formatMessage({ id: 'password' }),
          contentStyle: styles.content,
          actions: actions,
          modal: true,
          open: auth.isPasswordDialogOpen, __source: { fileName: _jsxFileName, lineNumber: 75 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
          id: 'password',
          ref: field => {this.password = field;this.password && this.password.focus();},
          onKeyDown: e => {this.handleKeyDown(e, this.hanldePasswordSubmit);},
          errorText: getValidationErrorMessage('password'),
          floatingLabelText: intl.formatMessage({ id: 'password' }),
          hintText: intl.formatMessage({ id: 'password' }),
          type: 'Password',
          fullWidth: true, __source: { fileName: _jsxFileName, lineNumber: 81 }, __self: this }),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 90 }, __self: this })));




  }} /* istanbul ignore next */exports.PasswordDialog = PasswordDialog;



PasswordDialog.propTypes = {
  intl: /* istanbul ignore next */_reactIntl.intlShape.isRequired,
  muiTheme: /* istanbul ignore next */_propTypes2.default.object.isRequired,
  reauthenticateUserWithCredential: /* istanbul ignore next */_propTypes2.default.func.isRequired,
  setPasswordDialogOpen: /* istanbul ignore next */_propTypes2.default.func.isRequired };



const mapStateToProps = state => {
  const { auth } = state;
  return {
    auth,
    getValidationErrorMessage: fieldID => /* istanbul ignore next */(0, _selectors.getValidationErrorMessage)(auth, fieldID) };

}; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(
mapStateToProps,
{
  reauthenticateUserWithCredential: /* istanbul ignore next */_actions.reauthenticateUserWithCredential,
  setPasswordDialogOpen: /* istanbul ignore next */_actions.setPasswordDialogOpen })(

/* istanbul ignore next */(0, _reactIntl.injectIntl)( /* istanbul ignore next */(0, _muiThemeable2.default)()(PasswordDialog)));