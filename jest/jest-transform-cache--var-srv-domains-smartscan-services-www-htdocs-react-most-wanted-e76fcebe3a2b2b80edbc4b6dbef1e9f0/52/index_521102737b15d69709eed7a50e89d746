/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.




















getLocaleMessages = getLocaleMessages; /* istanbul ignore next */exports.











addLocalizationData = addLocalizationData;var /* istanbul ignore next */_reactIntl = require('react-intl');var /* istanbul ignore next */_en = require('./en'); /* istanbul ignore next */var _en2 = _interopRequireDefault(_en);var /* istanbul ignore next */_de = require('./de'); /* istanbul ignore next */var _de2 = _interopRequireDefault(_de);var /* istanbul ignore next */_en3 = require('react-intl/locale-data/en'); /* istanbul ignore next */var _en4 = _interopRequireDefault(_en3);var /* istanbul ignore next */_de3 = require('react-intl/locale-data/de'); /* istanbul ignore next */var _de4 = _interopRequireDefault(_de3);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}const locales = [{ locale: 'en', messages: /* istanbul ignore next */_en2.default, data: /* istanbul ignore next */_en4.default }, { locale: 'de', messages: /* istanbul ignore next */_de2.default, data: /* istanbul ignore next */_de4.default }];function getLocaleMessages(locale) {const localization = locales.find(l => {return l.locale === locale;});if (localization) {return localization.messages;} //If no locale is found the first one will be returned
  return locales[0].messages;}function addLocalizationData() {
  locales.map(l => {
    /* istanbul ignore next */(0, _reactIntl.addLocaleData)(l.data);
    return l;
  });

} /* istanbul ignore next */exports.default =


locales;